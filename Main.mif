-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2980;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0B28;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 1183;  -- 	STORE  DVel        ; Reset API variables
           009 : 1182;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 830A;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 82EC;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : BFFF;  -- 	LOADI  &HFFFF
           010 : 1322;  -- 	STORE  PrevDist
           011 : 9003;  -- 	IN XIO
           012 : 4B33;  -- 	AND Mask0
           013 : 41C5;  -- 	JZERO SendData
           014 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           015 : 4B37;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           016 : 381C;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           017 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           018 : 4B34;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           019 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           01A : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           01B : 2811;  -- 	JUMP   WaitForSafety
           01C : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           01D : 4B34;  -- 	AND    Mask1
           01E : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01F : 1320;  -- 	STORE  Temp        ; (overkill, but looks nice)
           020 : 6001;  -- 	SHIFT  1
           021 : 5320;  -- 	OR     Temp
           022 : 9807;  -- 	OUT    XLEDS
           023 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           024 : 4B35;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           025 : 381C;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           026 : 0B28;  -- 	LOAD   Zero
           027 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           028 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           029 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           02A : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           02B : A002;  -- 	CLI    &B0010      ; disable the movement API interrupt
           02C : 8130;  -- 	CALL   AcquireData ; perform a 360 degree scan
           02D : B800;  -- 	LOADI  0
           02E : 1183;  -- 	STORE  DVel        ; zero desired forward velocity
           02F : 90C2;  -- 	IN     THETA
           030 : 1182;  -- 	STORE  DTheta      ; desired heading = current heading
           031 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           032 : 82E0;  -- 	CALL Wait1
           033 : 80D5;  -- 	CALL FindLongest
           034 : 092D;  -- 	LOAD MaxRangeMid
           035 : 9805;  -- 	OUT SSEG2
           036 : 1182;  -- 	STORE DTheta
           037 : 80C1;  -- 	CALL WaitForRotate
           038 : 98C3;  -- 	OUT RESETPOS
           039 : B800;  -- 	LOADI 0
           03A : 1182;  -- 	Store DTheta
           03B : 0B52;  -- 	LOAD FFastMid
           03C : 1183;  -- 	STORE DVel
           03D : 0B36;  -- 	LOAD Mask3
           03E : 5335;  -- 	OR Mask2
           03F : 98B2;  -- 	OUT SONAREN
           040 : 90C0;  -- GoToWall: IN XPOS
           041 : 1B43;  -- 	ADD Ft3
           042 : 212F;  -- 	SUB MaxRangeDist
           043 : 384D;  -- 	JPOS ReachedFirstWall
           044 : 90AB;  -- 	IN DIST3
           045 : 3048;  -- 	JNEG FirstCheckSonar2
           046 : 2343;  -- 	SUB Ft3
           047 : 304D;  -- 	JNEG ReachedFirstWall
           048 : 90AA;  -- FirstCheckSonar2: IN DIST2
           049 : 3040;  -- 	JNEG GoToWall
           04A : 2343;  -- 	SUB Ft3
           04B : 304D;  -- 	JNEG ReachedFirstWall
           04C : 2840;  -- 	JUMP GoToWall
           04D : B800;  -- 	LOADI 0
           04E : 1183;  -- 	STORE DVel
           04F : 1182;  -- 	Store DTheta
           050 : A002;  -- 	CLI    &B0010
           051 : 8130;  -- 	CALL   AcquireData
           052 : B800;  -- 	LOADI  0
           053 : 1183;  -- 	STORE  DVel        ; zero desired forward velocity
           054 : 90C2;  -- 	IN     THETA
           055 : 1182;  -- 	STORE  DTheta      ; desired heading = current heading
           056 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)	
           057 : 82E0;  -- 	CALL Wait1
           058 : 815C;  -- 	CALL   FindClosest
           059 : 1B4A;  -- 	ADD	   Deg90
           05A : 1182;  -- 	STORE  DTheta
           05B : 80C1;  -- 	CALL WaitForRotate
           05C : 0B36;  -- 	LOAD Mask3
           05D : 5335;  -- 	OR Mask2
           05E : 5338;  -- 	OR Mask5
           05F : 5333;  -- 	OR Mask0
           060 : 98B2;  -- 	OUT  SONAREN
           061 : 98C3;  -- 	OUT RESETPOS
           062 : B800;  -- 	LOADI 0
           063 : 1182;  -- 	STORE DTheta
           064 : 0B52;  -- 	Load FFastMid
           065 : 1183;  -- 	Store DVel
           066 : 90AB;  -- MoveByWall: IN DIST3
           067 : 306A;  -- 	JNEG CheckSonar2
           068 : 2343;  -- 	SUB Ft3
           069 : 308D;  -- 	JNEG ReachedWall
           06A : 90AA;  -- CheckSonar2: IN DIST2
           06B : 306E;  -- 	JNEG RightWall
           06C : 2343;  -- 	SUB Ft3
           06D : 308D;  -- 	JNEG ReachedWall
           06E : 90AD;  -- RightWall: IN DIST5
           06F : 9805;  -- 	OUT SSEG2
           070 : 1323;  -- 	STORE CurrDist
           071 : 3875;  -- 	JPOS NoWiggle
           072 : 80C7;  -- 	CALL GetWiggleAngle
           073 : 1182;  --     STORE DTheta
           074 : 2866;  --     JUMP MoveByWall
           075 : 0B23;  --     LOAD CurrDist
           076 : 2322;  --     SUB PrevDist
           077 : 2345;  --     SUB Ft4
           078 : 81E6;  --     CALL Abs
           079 : 9805;  --     OUT SSEG2
           07A : 2340;  --     SUB Ft1
           07B : 3881;  --     JPOS RightWallAdjust
           07C : 90A8;  --     IN DIST0
           07D : 309A;  --     JNEG Finish ; If left didn't pick anything up, still trigger -- don't want false-negatives
           07E : 2348;  --     SUB Ft13
           07F : 3081;  --     JNEG RightWallAdjust ; If left was left than 13 ft, is false-positive, don't trigger
           080 : 289A;  --     JUMP Finish ; Trigger finish
           081 : B814;  -- RightWallAdjust: LOADI 20
           082 : 11C4;  -- 	STORE MaxVal ; Max cap value for angle adjustment
           083 : 0B23;  --     LOAD CurrDist
           084 : 1322;  -- 	STORE PrevDist ; Put CurrDist in PrevDist
           085 : 2342;  -- 	SUB Ft2Half
           086 : 81E7;  -- 	Call NEG
           087 : 6014;  -- 	SHIFT -4
           088 : 81B8;  -- 	CALL CapValue
           089 : 1182;  -- 	STORE DTheta
           08A : 3866;  -- 	JPOS MoveByWall
           08B : 3066;  -- 	JNEG MoveByWall
           08C : 2866;  -- 	JUMP MoveByWall
           08D : B800;  -- ReachedWall: LOADI 0
           08E : 1183;  -- 	Store DVel
           08F : 82E0;  -- 	CALL Wait1
           090 : 0982;  -- 	Load DTheta ; Should this be DTheta, THETA, or 0?
           091 : 1B4A;  -- 	ADD Deg90
           092 : 1182;  -- 	STORE DTheta
           093 : 80C1;  -- 	CALL WaitForRotate
           094 : 0B52;  -- 	Load FFastMid
           095 : 1183;  -- 	Store DVel
           096 : 98C3;  -- 	OUT RESETPOS
           097 : B800;  -- 	LOADI 0
           098 : 1182;  -- 	STORE DTheta
           099 : 2866;  -- 	JUMP MoveByWall
           09A : 82E6;  -- Finish: Call WaitHalfSec
           09B : B800;  -- 	LOADI 0
           09C : 1183;  -- 	STORE DVel
           09D : 82E0;  -- 	Call Wait1
           09E : 98C3;  -- 	OUT RESETPOS
           09F : BFA6;  -- 	LOADI -90
           0A0 : 1182;  -- 	STORE DTheta
           0A1 : 80C1;  -- 	CALL WaitForRotate
           0A2 : 98C3;  -- 	OUT RESETPOS
           0A3 : B800;  -- 	LOADI 0
           0A4 : 1182;  -- 	STORE DTheta	
           0A5 : 0B52;  -- 	LOAD FFastMid
           0A6 : 1183;  -- 	STORE DVel
           0A7 : 90C0;  -- WaitForFinish: IN XPOS
           0A8 : 2346;  -- 	SUB Ft5
           0A9 : 38B2;  -- 	JPOS FinishStop
           0AA : 90AB;  -- 	IN DIST3
           0AB : 30AE;  -- 	JNEG CheckSonar2Finish
           0AC : 2341;  -- 	SUB Ft2
           0AD : 30B2;  -- 	JNEG FinishStop
           0AE : 90AA;  -- CheckSonar2Finish: IN DIST2
           0AF : 30A7;  -- 	JNEG WaitForFinish
           0B0 : 2341;  -- 	SUB Ft2
           0B1 : 38A7;  -- 	JPOS WaitForFinish
           0B2 : B800;  -- FinishStop:	LOADI 0
           0B3 : 1183;  -- 	STORE DVel
           0B4 : BA30;  -- 	LOADI  &H230
           0B5 : 980A;  -- 	OUT    BEEP        ; start beep sound
           0B6 : B8F0;  -- 	LOADI &HF0F0	
           0B7 : 9801;  -- 	OUT LEDS
           0B8 : 9807;  -- 	OUT XLEDS
           0B9 : 82E6;  -- 	CALL WaitHalfSec
           0BA : BA30;  -- 	LOADI  &H230
           0BB : 980A;  -- 	OUT    BEEP        ; start beep sound
           0BC : BF0F;  -- 	LOADI &H0F0F
           0BD : 9801;  -- 	OUT LEDS
           0BE : 9807;  -- 	OUT XLEDS
           0BF : 82E6;  -- 	CALL WaitHalfSec
           0C0 : 28B4;  -- 	JUMP   InfLoop
           0C1 : 81B1;  -- WaitForRotate: CALL GetThetaErr
           0C2 : 81E6;  -- 	CALL Abs
           0C3 : 6FFE;  -- 	ADDI -2
           0C4 : 38C1;  -- 	JPOS WaitForRotate
           0C5 : 82E0;  -- 	CALL Wait1
           0C6 : 8800;  -- 	RETURN
           0C7 : 9002;  -- GetWiggleAngle: IN Timer
           0C8 : 81DA;  -- 	CALL Mod10
           0C9 : 6FFB;  -- 	ADDI -5
           0CA : 30CF;  -- 	JNEG WiggleN
           0CB : 38D2;  -- 	JPOS WiggleP
           0CC : B800;  -- 	LOADI 0
           0CD : 1324;  -- 	STORE WiggleAngle
           0CE : 8800;  -- 	RETURN
           0CF : BFFE;  -- WiggleN: LOADI -2
           0D0 : 1324;  -- 	STORE WiggleAngle
           0D1 : 8800;  -- 	RETURN
           0D2 : B802;  -- WiggleP: LOADI 2
           0D3 : 1324;  -- 	STORE WiggleAngle
           0D4 : 8800;  -- 	RETURN
           0D5 : 0B28;  -- 	LOAD Zero
           0D6 : 1125;  -- 	STORE FLIteration
           0D7 : 112C;  -- 	STORE MaxRangeLength
           0D8 : BB58;  -- 	LOADI DataArray ; get the base address
           0D9 : 1158;  -- 	STORE ArrayIndex
           0DA : 1127;  -- 	STORE CurrRangeStart
           0DB : 6968;  -- 	ADDI 360
           0DC : 1174;  -- 	STORE EndIndex
           0DD : 7158;  -- 	ILOAD ArrayIndex ; get the first entry of array
           0DE : 1126;  -- 	STORE FLPrevDist ; store as prev dist
           0DF : 0958;  -- 	LOAD ArrayIndex
           0E0 : 6801;  -- 	ADDI 1
           0E1 : 1158;  -- 	STORE ArrayIndex ; move to next entry
           0E2 : 5974;  -- 	XOR EndIndex ; compare with end index
           0E3 : 4106;  -- 	JZERO FLCheckEndLimit
           0E4 : 7158;  -- 	ILOAD ArrayIndex ; get the data
           0E5 : 2326;  -- 	SUB MaxDistThreshold
           0E6 : 38EC;  -- 	JPOS FLNotOnWall ; if infinite dist, skip
           0E7 : 7158;  -- 	ILOAD ArrayIndex ; get the data again
           0E8 : 2126;  -- 	SUB FLPrevDist ; subtract previous dist
           0E9 : 81E6;  -- 	CALL Abs ; get absolute error
           0EA : 2325;  -- 	SUB AdjacentThreshold ; using half foot as max error between adjacent points (too much?)
           0EB : 3103;  -- 	JNEG FLNextPoint
           0EC : 0958;  -- 	LOAD ArrayIndex
           0ED : 1128;  -- 	STORE CurrRangeEnd
           0EE : 2127;  -- 	SUB CurrRangeStart
           0EF : 1129;  -- 	STORE CurrRangeLength
           0F0 : 38F8;  -- 	JPOS FLLengthNotNeg
           0F1 : 40F8;  -- 	JZERO FLLengthNotNeg
           0F2 : 0927;  -- 	LOAD CurrRangeStart
           0F3 : 6E98;  -- 	ADDI -360
           0F4 : 1127;  -- 	STORE CurrRangeStart
           0F5 : 0929;  -- 	LOAD CurrRangeLength
           0F6 : 6968;  -- 	ADDI 360
           0F7 : 1129;  -- 	STORE CurrRangeLength
           0F8 : 212C;  -- 	SUB MaxRangeLength
           0F9 : 3101;  -- 	JNEG FLNewStart
           0FA : 4101;  -- 	JZERO FLNewStart
           0FB : 0927;  -- 	LOAD CurrRangeStart ; Set max values to curr values
           0FC : 112A;  -- 	STORE MaxRangeStart
           0FD : 0928;  -- 	LOAD CurrRangeEnd
           0FE : 112B;  -- 	STORE MaxRangeEnd
           0FF : 0929;  -- 	LOAD CurrRangeLength
           100 : 112C;  -- 	STORE MaxRangeLength
           101 : 0958;  -- 	LOAD ArrayIndex ; Get index of most recent point, which wasn't on wall
           102 : 1127;  -- 	STORE CurrRangeStart ; Start new range here
           103 : 7158;  -- 	ILOAD ArrayIndex ; get the data again
           104 : 1126;  -- 	STORE FLPrevDist ; store as prev dist
           105 : 28DF;  -- 	JUMP FLLoop
           106 : 0925;  -- 	LOAD FLIteration
           107 : 390D;  -- 	JPOS FLDone
           108 : 6801;  -- 	ADDI 1
           109 : 1125;  -- 	STORE FLIteration ; increment iteration count
           10A : BB58;  -- 	LOADI DataArray ; get the base address
           10B : 1158;  -- 	STORE ArrayIndex ; set index back to beginning for second iteration
           10C : 28E4;  -- 	JUMP FLLoopInner
           10D : BB58;  -- 	LOADI DataArray	; base address
           10E : 212A;  -- 	SUB MaxRangeStart
           10F : 81E7;  -- 	CALL Neg
           110 : 112A;  -- 	STORE MaxRangeStart
           111 : BB58;  -- 	LOADI DataArray
           112 : 212B;  -- 	SUB MaxRangeEnd
           113 : 81E7;  -- 	CALL Neg
           114 : 112B;  -- 	STORE MaxRangeEnd
           115 : 092A;  -- 	LOAD MaxRangeStart
           116 : 192B;  -- 	ADD MaxRangeEnd
           117 : 6011;  -- 	SHIFT -1
           118 : 112D;  -- 	STORE MaxRangeMid
           119 : BB58;  -- 	LOADI DataArray ; base address
           11A : 192D;  -- 	ADD MaxRangeMid ; index array at mid of max range
           11B : 112E;  -- 	STORE FLtmp
           11C : 092D;  -- 	LOAD MaxRangeMid
           11D : 3922;  -- 	JPOS FLMidNotNeg
           11E : 4122;  -- 	JZERO FLMidNotNeg
           11F : 092E;  -- 	LOAD FLtmp
           120 : 6968;  -- 	ADDI 360
           121 : 112E;  -- 	STORE FLtmp ; add 360 to index to make it a valid index
           122 : 712E;  -- 	ILOAD FLtmp
           123 : 112F;  -- 	STORE MaxRangeDist
           124 : 8800;  -- 	RETURN
           125 : 0000;  -- 	FLIteration: DW 0
           126 : 0000;  -- 	FLPrevDist: DW 0
           127 : 0000;  -- 	CurrRangeStart: DW 0
           128 : 0000;  -- 	CurrRangeEnd: DW 0
           129 : 0000;  -- 	CurrRangeLength: DW 0
           12A : 0000;  -- 	MaxRangeStart: DW 0
           12B : 0000;  -- 	MaxRangeEnd: DW 0
           12C : 0000;  -- 	MaxRangeLength: DW 0
           12D : 0000;  -- 	MaxRangeMid: DW 0
           12E : 0000;  -- 	FLTmp: DW 0
           12F : 0000;  -- 	MaxRangeDist: DW 0
           130 : 90C2;  -- 	IN     THETA
           131 : 1159;  -- 	STORE  OrigTheta
           132 : 115A;  -- 	STORE  CurrTheta
           133 : 0B28;  -- 	LOAD   Zero
           134 : 115B;  -- 	STORE  TurnTracker
           135 : 0B33;  -- 	LOAD   Mask0
           136 : 98B2;  -- 	OUT    SONAREN
           137 : 0B4E;  -- 	LOAD   FSlow
           138 : 988B;  -- 	OUT    RVELCMD
           139 : 0B4F;  -- 	LOAD   RSlow
           13A : 9883;  -- 	OUT	   LVELCMD
           13B : 90C2;  -- 	IN     Theta
           13C : 595A;  -- 	XOR    CurrTheta
           13D : 4137;  -- 	JZERO  ADWait      ; same angle; wait until turned more
           13E : 90C2;  -- 	IN     Theta
           13F : 2159;  -- 	SUB    OrigTheta
           140 : 81E6;  -- 	CALL   Abs
           141 : 68B4;  -- 	ADDI   180         ; account for angle wrapping
           142 : 81E0;  -- 	CALL   Mod360
           143 : 6F4C;  -- 	ADDI   -180
           144 : 81E6;  -- 	CALL   Abs
           145 : 6FF6;  -- 	ADDI   -10         ; 10 degree margin
           146 : 3149;  -- 	JNEG   ADStore     ; margin not passed
           147 : B801;  -- 	LOADI  1           ; margin passed
           148 : 115B;  -- 	STORE  TurnTracker
           149 : 90C2;  -- 	IN     THETA
           14A : 115A;  -- 	STORE  CurrTheta   ; update current angle
           14B : 685A;  -- 	ADDI   90          ; since this sonar is facing left
           14C : 81E0;  -- 	CALL   Mod360      ; wrap angles >360
           14D : 6B58;  -- 	ADDI   DataArray   ; index into the array (add angle/index to base address)
           14E : 1158;  -- 	STORE  ArrayIndex
           14F : 90A8;  -- 	IN     DIST0
           150 : 7958;  -- 	ISTORE ArrayIndex  ; store this data point
           151 : 095B;  -- 	LOAD   TurnTracker
           152 : 4137;  -- 	JZERO  ADWait      ; haven't turned at all
           153 : 90C2;  -- 	IN     THETA
           154 : 5959;  -- 	XOR    OrigTheta
           155 : 3937;  -- 	JPOS   ADWait
           156 : 3137;  -- 	JNEG   ADWait
           157 : 8800;  -- 	RETURN ; done
           158 : 0000;  -- 	ArrayIndex: DW 0
           159 : 0000;  -- 	OrigTheta: DW 0
           15A : 0000;  -- 	CurrTheta: DW 0
           15B : 0000;  -- 	TurnTracker: DW 0
           15C : BB58;  -- 	LOADI  DataArray   ; get the array start address
           15D : 1158;  -- 	STORE  ArrayIndex
           15E : 1175;  -- 	STORE  CloseIndex  ; keep track of shortest distance
           15F : 6968;  -- 	ADDI   360
           160 : 1174;  -- 	STORE  EndIndex
           161 : 7158;  -- 	ILOAD  ArrayIndex  ; get the first entry of array
           162 : 1176;  -- 	STORE  CloseVal    ; keep track of shortest distance
           163 : 0958;  -- 	LOAD   ArrayIndex
           164 : 6801;  -- 	ADDI   1
           165 : 1158;  -- 	STORE  ArrayIndex  ; move to next entry
           166 : 5974;  -- 	XOR    EndIndex    ; compare with end index
           167 : 4170;  -- 	JZERO  FCDone
           168 : 7158;  -- 	ILOAD  ArrayIndex  ; get the data
           169 : 2176;  -- 	SUB    CloseVal    ; compare with current min
           16A : 3963;  -- 	JPOS   FCLoop      ; not closer; move on
           16B : 7158;  -- 	ILOAD  ArrayIndex  ; new minimum
           16C : 1176;  -- 	STORE  CloseVal
           16D : 0958;  -- 	LOAD   ArrayIndex
           16E : 1175;  -- 	STORE  CloseIndex
           16F : 2963;  -- 	JUMP   FCLoop
           170 : BB58;  -- 	LOADI  DataArray   ; start address
           171 : 2175;  -- 	SUB    CloseIndex  ; start address - entry address
           172 : 81E7;  -- 	CALL   Neg         ; entry address - start address
           173 : 8800;  -- 	RETURN
           174 : 0000;  -- 	EndIndex:   DW 0
           175 : 0000;  -- 	CloseIndex: DW 0
           176 : 0000;  -- 	CloseVal:   DW 0
           177 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           178 : 0B28;  -- 	LOAD   Zero        ; Stop everything.
           179 : 9883;  -- 	OUT    LVELCMD
           17A : 988B;  -- 	OUT    RVELCMD
           17B : 98B2;  -- 	OUT    SONAREN
           17C : 097F;  -- 	LOAD   DEAD        ; An indication that we are dead
           17D : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           17E : 297E;  -- 	JUMP   Forever     ; Do this forever.
           17F : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           180 : 8184;  -- 	CALL   ControlMovement
           181 : B000;  -- 	RETI   ; return from ISR
           182 : 0000;  -- DTheta:    DW 0
           183 : 0000;  -- DVel:      DW 0
           184 : B850;  -- 	LOADI  80          ; used for the CapValue subroutine ; NOTE: USED TO BE LOADI 50
           185 : 11C4;  -- 	STORE  MaxVal
           186 : 81B1;  -- 	CALL   GetThetaErr ; get the heading error
           187 : 6001;  -- 	SHIFT  1			; NOTE: was originally SHIFT 2
           188 : 11AE;  -- 	STORE  CMAErr      ; hold temporarily
           189 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           18A : 81B8;  -- 	CALL   CapValue    ; get a +/- max of 50
           18B : 19AE;  -- 	ADD    CMAErr
           18C : 11AE;  -- 	STORE  CMAErr      ; now contains a desired differential
           18D : B9FE;  -- 	LOADI  510
           18E : 11C4;  -- 	STORE  MaxVal
           18F : 0983;  -- 	LOAD   DVel
           190 : 81B8;  -- 	CALL   CapValue    ; ensure velocity is valid
           191 : 1183;  -- 	STORE  DVel        ; overwrite any invalid input
           192 : 19AE;  -- 	ADD    CMAErr
           193 : 81B8;  -- 	CALL   CapValue    ; ensure velocity is valid
           194 : 11B0;  -- 	STORE  CMAR
           195 : 09AE;  -- 	LOAD   CMAErr
           196 : 81E7;  -- 	CALL   Neg         ; left wheel gets negative differential
           197 : 1983;  -- 	ADD    DVel
           198 : 81B8;  -- 	CALL   CapValue
           199 : 11AF;  -- 	STORE  CMAL
           19A : 09AE;  -- 	LOAD   CMAErr
           19B : 6001;  -- 	SHIFT  1           ; double the differential
           19C : 11AE;  -- 	STORE  CMAErr
           19D : 09B0;  -- 	LOAD   CMAR
           19E : 21AF;  -- 	SUB    CMAL        ; calculate the actual differential
           19F : 21AE;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           1A0 : 41A9;  -- 	JZERO  CMADone
           1A1 : 11AE;  -- 	STORE  CMAErr      ; the missing part
           1A2 : 19AF;  -- 	ADD    CMAL
           1A3 : 81B8;  -- 	CALL   CapValue
           1A4 : 11AF;  -- 	STORE  CMAL
           1A5 : 09B0;  -- 	LOAD   CMAR
           1A6 : 21AE;  -- 	SUB    CMAErr
           1A7 : 81B8;  -- 	CALL   CapValue
           1A8 : 11B0;  -- 	STORE  CMAR
           1A9 : 09AF;  -- 	LOAD   CMAL
           1AA : 9883;  -- 	OUT    LVELCMD
           1AB : 09B0;  -- 	LOAD   CMAR
           1AC : 988B;  -- 	OUT    RVELCMD
           1AD : 8800;  -- 	RETURN
           1AE : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           1AF : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           1B0 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           1B1 : 90C2;  -- 	IN     THETA
           1B2 : 2182;  -- 	SUB    DTheta      ; actual - desired angle
           1B3 : 81E7;  -- 	CALL   Neg         ; desired - actual angle
           1B4 : 68B4;  -- 	ADDI   180
           1B5 : 81E0;  -- 	CALL   Mod360
           1B6 : 6F4C;  -- 	ADDI   -180
           1B7 : 8800;  -- 	RETURN
           1B8 : 21C4;  -- 	SUB     MaxVal
           1B9 : 39BF;  -- 	JPOS    CapVelHigh
           1BA : 19C4;  -- 	ADD     MaxVal
           1BB : 19C4;  -- 	ADD     MaxVal
           1BC : 31C1;  -- 	JNEG    CapVelLow
           1BD : 21C4;  -- 	SUB     MaxVal
           1BE : 8800;  -- 	RETURN
           1BF : 09C4;  -- 	LOAD    MaxVal
           1C0 : 8800;  -- 	RETURN
           1C1 : 09C4;  -- 	LOAD    MaxVal
           1C2 : 81E7;  -- 	CALL    Neg
           1C3 : 8800;  -- 	RETURN
           1C4 : 01FE;  -- 	MaxVal: DW 510
           1C5 : BB58;  -- 	LOADI   DataArray
           1C6 : 1158;  -- 	STORE   ArrayIndex
           1C7 : 6968;  -- 	ADDI    360
           1C8 : 1320;  -- 	STORE   Temp        ; Also store the end address
           1C9 : 9099;  -- 	IN      UART_RDY    ; get the UART status
           1CA : 6019;  -- 	SHIFT   -9          ; check if the write buffer is full
           1CB : 39C9;  -- 	JPOS    SDLoop1
           1CC : 7158;  -- 	ILOAD   ArrayIndex
           1CD : 6018;  -- 	SHIFT   -8          ; move high byte to low byte
           1CE : 9898;  -- 	OUT     UART_DAT
           1CF : 9099;  -- 	IN      UART_RDY    ; get the UART status
           1D0 : 6019;  -- 	SHIFT   -9          ; check if the write buffer is full
           1D1 : 39CF;  -- 	JPOS    SDLoop2
           1D2 : 7158;  -- 	ILOAD   ArrayIndex
           1D3 : 9898;  -- 	OUT     UART_DAT    ; send low byte
           1D4 : 0958;  -- 	LOAD    ArrayIndex
           1D5 : 6801;  -- 	ADDI    1           ; increment index
           1D6 : 1158;  -- 	STORE   ArrayIndex
           1D7 : 2320;  -- 	SUB     Temp        ; check if at end of array
           1D8 : 31C9;  -- 	JNEG    SDLoop1
           1D9 : 2977;  -- 	JUMP    Die         ; when done, go to infinite loop
           1DA : 31DD;  -- 	JNEG   M10N
           1DB : 6FF6;  -- 	ADDI   -10
           1DC : 29DA;  -- 	JUMP   Mod10
           1DD : 680A;  -- 	ADDI   10
           1DE : 31DD;  -- 	JNEG   M10N
           1DF : 8800;  -- 	RETURN
           1E0 : 31E3;  -- 	JNEG   M360N
           1E1 : 6E98;  -- 	ADDI   -360
           1E2 : 29E0;  -- 	JUMP   Mod360
           1E3 : 6968;  -- 	ADDI   360
           1E4 : 31E3;  -- 	JNEG   M360N
           1E5 : 8800;  -- 	RETURN
           1E6 : 39E9;  -- 	JPOS   Abs_r
           1E7 : 5B27;  -- 	XOR    NegOne       ; Flip all bits
           1E8 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           1E9 : 8800;  -- 	RETURN
           1EA : 0A4A;  -- 	LOAD   AtanY
           1EB : 81E6;  -- 	CALL   Abs          ; abs(y)
           1EC : 124C;  -- 	STORE  AtanT
           1ED : 0A49;  -- 	LOAD   AtanX        ; abs(x)
           1EE : 81E6;  -- 	CALL   Abs
           1EF : 224C;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           1F0 : 31FB;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           1F1 : 0A49;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           1F2 : 31F8;  -- 	JNEG   A2_R3
           1F3 : 820A;  -- 	CALL   A2_calc      ; Octants 1, 8
           1F4 : 31F6;  -- 	JNEG   A2_R1n
           1F5 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           1F6 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           1F7 : 8800;  -- 	RETURN
           1F8 : 820A;  -- 	CALL   A2_calc      ; Octants 4, 5            
           1F9 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           1FA : 8800;  -- 	RETURN
           1FB : 0A4A;  -- 	LOAD   AtanY        ; Swap input arguments
           1FC : 124C;  -- 	STORE  AtanT
           1FD : 0A49;  -- 	LOAD   AtanX
           1FE : 124A;  -- 	STORE  AtanY
           1FF : 0A4C;  -- 	LOAD   AtanT
           200 : 1249;  -- 	STORE  AtanX
           201 : 3A06;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           202 : 820A;  -- 	CALL   A2_calc      ; else octants 6, 7
           203 : 81E7;  -- 	CALL   Neg          ; Negatge the number
           204 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           205 : 8800;  -- 	RETURN
           206 : 820A;  -- 	CALL   A2_calc      ; Octants 2, 3
           207 : 81E7;  -- 	CALL   Neg          ; negate the angle
           208 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           209 : 8800;  -- 	RETURN
           20A : 0A4A;  -- 	LOAD   AtanY
           20B : 12A9;  -- 	STORE  d16sN        ; Y in numerator
           20C : 0A49;  -- 	LOAD   AtanX
           20D : 12AA;  -- 	STORE  d16sD        ; X in denominator
           20E : 8236;  -- 	CALL   A2_div       ; divide
           20F : 0AAF;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           210 : 124B;  -- 	STORE  AtanRatio
           211 : 1272;  -- 	STORE  m16sA
           212 : 1273;  -- 	STORE  m16sB
           213 : 822D;  -- 	CALL   A2_mult      ; X^2
           214 : 1272;  -- 	STORE  m16sA
           215 : 0A4D;  -- 	LOAD   A2c
           216 : 1273;  -- 	STORE  m16sB
           217 : 822D;  -- 	CALL   A2_mult
           218 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           219 : 12AA;  -- 	STORE  d16sD
           21A : 0A4B;  -- 	LOAD   AtanRatio
           21B : 12A9;  -- 	STORE  d16sN        ; Ratio in numerator
           21C : 8236;  -- 	CALL   A2_div       ; divide
           21D : 0AAF;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           21E : 1272;  -- 	STORE  m16sA        ; <= result in radians
           21F : 0A4E;  -- 	LOAD   A2cd         ; degree conversion factor
           220 : 1273;  -- 	STORE  m16sB
           221 : 822D;  -- 	CALL   A2_mult      ; convert to degrees
           222 : 124C;  -- 	STORE  AtanT
           223 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           224 : 4B29;  -- 	AND    One
           225 : 422A;  -- 	JZERO  A2_rdwn      ; round down
           226 : 0A4C;  -- 	LOAD   AtanT
           227 : 6018;  -- 	SHIFT  -8
           228 : 6801;  -- 	ADDI   1            ; round up
           229 : 8800;  -- 	RETURN
           22A : 0A4C;  -- 	LOAD   AtanT
           22B : 6018;  -- 	SHIFT  -8           ; round down
           22C : 8800;  -- 	RETURN
           22D : 824F;  -- 	CALL   Mult16s
           22E : 0A77;  -- 	LOAD   mres16sH
           22F : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           230 : 1277;  -- 	STORE  mres16sH
           231 : 0A76;  -- 	LOAD   mres16sL
           232 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           233 : 4B3B;  -- 	AND    LowByte
           234 : 5277;  -- 	OR     mres16sH     ; combine high and low words of result
           235 : 8800;  -- 	RETURN
           236 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           237 : 124C;  -- 	STORE  AtanT
           238 : 0A4C;  -- 	LOAD   AtanT
           239 : 6FFF;  -- 	ADDI   -1
           23A : 3A3D;  -- 	JPOS   A2_DN        ; not done; continue shifting
           23B : 8278;  -- 	CALL   Div16s       ; do the standard division
           23C : 8800;  -- 	RETURN
           23D : 124C;  -- 	STORE  AtanT
           23E : 0AA9;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           23F : 6001;  -- 	SHIFT  1
           240 : 5AA9;  -- 	XOR    d16sN        ; if the sign changed,
           241 : 3245;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           242 : 5AA9;  -- 	XOR    d16sN        ; get back shifted version
           243 : 12A9;  -- 	STORE  d16sN
           244 : 2A38;  -- 	JUMP   A2_DL
           245 : 0AAA;  -- 	LOAD   d16sD
           246 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           247 : 12AA;  -- 	STORE  d16sD
           248 : 2A38;  -- 	JUMP   A2_DL
           249 : 0000;  -- AtanX:      DW 0
           24A : 0000;  -- AtanY:      DW 0
           24B : 0000;  -- AtanRatio:  DW 0        ; =y/x
           24C : 0000;  -- AtanT:      DW 0        ; temporary value
           24D : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           24E : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           24F : B800;  -- 	LOADI  0
           250 : 1274;  -- 	STORE  m16sc        ; clear carry
           251 : 1277;  -- 	STORE  mres16sH     ; clear result
           252 : B810;  -- 	LOADI  16           ; load 16 to counter
           253 : 1275;  -- 	STORE  mcnt16s      
           254 : 0A74;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           255 : 4259;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           256 : 0A77;  -- 	LOAD   mres16sH     ; if a carry, 
           257 : 1A72;  -- 	ADD    m16sA        ;  add multiplicand to result H
           258 : 1277;  -- 	STORE  mres16sH
           259 : 0A73;  -- 	LOAD   m16sB
           25A : 4B29;  -- 	AND    One          ; check bit 0 of multiplier
           25B : 1274;  -- 	STORE  m16sc        ; save as next carry
           25C : 4260;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           25D : 0A77;  -- 	LOAD   mres16sH     ; if bit 0 set,
           25E : 2272;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           25F : 1277;  -- 	STORE  mres16sH
           260 : 0A73;  -- 	LOAD   m16sB
           261 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           262 : 4A71;  -- 	AND    c7FFF        ; clear msb
           263 : 1273;  -- 	STORE  m16sB
           264 : 0A77;  -- 	LOAD   mres16sH     ; load result H
           265 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           266 : 5273;  -- 	OR     m16sB
           267 : 1273;  -- 	STORE  m16sB        ; result L now includes carry out from H
           268 : 0A77;  -- 	LOAD   mres16sH
           269 : 6011;  -- 	SHIFT  -1
           26A : 1277;  -- 	STORE  mres16sH     ; shift result H >>1
           26B : 0A75;  -- 	LOAD   mcnt16s
           26C : 6FFF;  -- 	ADDI   -1           ; check counter
           26D : 3A53;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           26E : 0A73;  -- 	LOAD   m16sB
           26F : 1276;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           270 : 8800;  -- 	RETURN              ; Done
           271 : 7FFF;  -- c7FFF: DW &H7FFF
           272 : 0000;  -- m16sA: DW 0 ; multiplicand
           273 : 0000;  -- m16sB: DW 0 ; multipler
           274 : 0000;  -- m16sc: DW 0 ; carry
           275 : 0000;  -- mcnt16s: DW 0 ; counter
           276 : 0000;  -- mres16sL: DW 0 ; result low
           277 : 0000;  -- mres16sH: DW 0 ; result high
           278 : B800;  -- 	LOADI  0
           279 : 12B0;  -- 	STORE  dres16sR     ; clear remainder result
           27A : 12AD;  -- 	STORE  d16sC1       ; clear carry
           27B : 0AA9;  -- 	LOAD   d16sN
           27C : 5AAA;  -- 	XOR    d16sD
           27D : 12AB;  -- 	STORE  d16sS        ; sign determination = N XOR D
           27E : B811;  -- 	LOADI  17
           27F : 12AC;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           280 : 0AAA;  -- 	LOAD   d16sD
           281 : 81E6;  -- 	CALL   Abs          ; take absolute value of denominator
           282 : 12AA;  -- 	STORE  d16sD
           283 : 0AA9;  -- 	LOAD   d16sN
           284 : 81E6;  -- 	CALL   Abs          ; take absolute value of numerator
           285 : 12A9;  -- 	STORE  d16sN
           286 : 0AA9;  -- 	LOAD   d16sN
           287 : 601F;  -- 	SHIFT  -15          ; get msb
           288 : 4B29;  -- 	AND    One          ; only msb (because shift is arithmetic)
           289 : 12AE;  -- 	STORE  d16sC2       ; store as carry
           28A : 0AA9;  -- 	LOAD   d16sN
           28B : 6001;  -- 	SHIFT  1            ; shift <<1
           28C : 52AD;  -- 	OR     d16sC1       ; with carry
           28D : 12A9;  -- 	STORE  d16sN
           28E : 0AAC;  -- 	LOAD   d16sT
           28F : 6FFF;  -- 	ADDI   -1           ; decrement counter
           290 : 42A0;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           291 : 12AC;  -- 	STORE  d16sT
           292 : 0AB0;  -- 	LOAD   dres16sR
           293 : 6001;  -- 	SHIFT  1            ; shift remainder
           294 : 52AE;  -- 	OR     d16sC2       ; with carry from other shift
           295 : 22AA;  -- 	SUB    d16sD        ; subtract denominator from remainder
           296 : 329B;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           297 : 12B0;  -- 	STORE  dres16sR
           298 : B801;  -- 	LOADI  1
           299 : 12AD;  -- 	STORE  d16sC1       ; set carry
           29A : 2A86;  -- 	JUMP   Div16s_loop
           29B : 1AAA;  -- 	ADD    d16sD        ; add denominator back in
           29C : 12B0;  -- 	STORE  dres16sR
           29D : B800;  -- 	LOADI  0
           29E : 12AD;  -- 	STORE  d16sC1       ; clear carry
           29F : 2A86;  -- 	JUMP   Div16s_loop
           2A0 : 0AA9;  -- 	LOAD   d16sN
           2A1 : 12AF;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           2A2 : 0AAB;  -- 	LOAD   d16sS        ; check the sign indicator
           2A3 : 32A5;  -- 	JNEG   Div16s_neg
           2A4 : 8800;  -- 	RETURN
           2A5 : 0AAF;  -- 	LOAD   dres16sQ     ; need to negate the result
           2A6 : 81E7;  -- 	CALL   Neg
           2A7 : 12AF;  -- 	STORE  dres16sQ
           2A8 : 8800;  -- 	RETURN	
           2A9 : 0000;  -- d16sN: DW 0 ; numerator
           2AA : 0000;  -- d16sD: DW 0 ; denominator
           2AB : 0000;  -- d16sS: DW 0 ; sign value
           2AC : 0000;  -- d16sT: DW 0 ; temp counter
           2AD : 0000;  -- d16sC1: DW 0 ; carry value
           2AE : 0000;  -- d16sC2: DW 0 ; carry value
           2AF : 0000;  -- dres16sQ: DW 0 ; quotient result
           2B0 : 0000;  -- dres16sR: DW 0 ; remainder result
           2B1 : 0ADB;  -- 	LOAD   L2X
           2B2 : 81E6;  -- 	CALL   Abs
           2B3 : 12DD;  -- 	STORE  L2T1
           2B4 : 0ADC;  -- 	LOAD   L2Y
           2B5 : 81E6;  -- 	CALL   Abs
           2B6 : 22DD;  -- 	SUB    L2T1
           2B7 : 32D3;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           2B8 : 1ADD;  -- 	ADD    L2T1
           2B9 : 1272;  -- 	STORE  m16sa
           2BA : B8F6;  -- 	LOADI  246       ; max * 246
           2BB : 1273;  -- 	STORE  m16sB
           2BC : 824F;  -- 	CALL   Mult16s
           2BD : 0A77;  -- 	LOAD   mres16sH
           2BE : 6008;  -- 	SHIFT  8
           2BF : 12DE;  -- 	STORE  L2T2
           2C0 : 0A76;  -- 	LOAD   mres16sL
           2C1 : 6018;  -- 	SHIFT  -8        ; / 256
           2C2 : 4B3B;  -- 	AND    LowByte
           2C3 : 52DE;  -- 	OR     L2T2
           2C4 : 12DF;  -- 	STORE  L2T3
           2C5 : 0ADD;  -- 	LOAD   L2T1
           2C6 : 1272;  -- 	STORE  m16sa
           2C7 : B868;  -- 	LOADI  104       ; min * 104
           2C8 : 1273;  -- 	STORE  m16sB
           2C9 : 824F;  -- 	CALL   Mult16s
           2CA : 0A77;  -- 	LOAD   mres16sH
           2CB : 6008;  -- 	SHIFT  8
           2CC : 12DE;  -- 	STORE  L2T2
           2CD : 0A76;  -- 	LOAD   mres16sL
           2CE : 6018;  -- 	SHIFT  -8        ; / 256
           2CF : 4B3B;  -- 	AND    LowByte
           2D0 : 52DE;  -- 	OR     L2T2
           2D1 : 1ADF;  -- 	ADD    L2T3     ; sum
           2D2 : 8800;  -- 	RETURN
           2D3 : 1ADD;  -- 	ADD    L2T1
           2D4 : 12DE;  -- 	STORE  L2T2
           2D5 : 0ADD;  -- 	LOAD   L2T1
           2D6 : 12DF;  -- 	STORE  L2T3
           2D7 : 0ADE;  -- 	LOAD   L2T2
           2D8 : 12DD;  -- 	STORE  L2T1
           2D9 : 0ADF;  -- 	LOAD   L2T3
           2DA : 2AB9;  -- 	JUMP   CalcDist
           2DB : 0000;  -- L2X:  DW 0
           2DC : 0000;  -- L2Y:  DW 0
           2DD : 0000;  -- L2T1: DW 0
           2DE : 0000;  -- L2T2: DW 0
           2DF : 0000;  -- L2T3: DW 0
           2E0 : 9802;  -- 	OUT    TIMER
           2E1 : 9002;  -- 	IN     TIMER
           2E2 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           2E3 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           2E4 : 32E1;  -- 	JNEG   Wloop
           2E5 : 8800;  -- 	RETURN
           2E6 : 9802;  -- 	OUT    TIMER
           2E7 : 9002;  -- 	IN     TIMER
           2E8 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           2E9 : 6FFB;  -- 	ADDI   -5         ; half second at 10Hz.
           2EA : 32E7;  -- 	JNEG   WloopHalfSec
           2EB : 8800;  -- 	RETURN
           2EC : 8304;  -- 	CALL   GetBattLvl
           2ED : 42EC;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           2EE : 2355;  -- 	SUB    MinBatt
           2EF : 32F2;  -- 	JNEG   DeadBatt
           2F0 : 1B55;  -- 	ADD    MinBatt     ; get original value back
           2F1 : 8800;  -- 	RETURN
           2F2 : B820;  -- 	LOADI  &H20
           2F3 : 980A;  -- 	OUT    BEEP        ; start beep sound
           2F4 : 8304;  -- 	CALL   GetBattLvl  ; get the battery level
           2F5 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           2F6 : 9805;  -- 	OUT    SSEG2
           2F7 : 9806;  -- 	OUT    LCD
           2F8 : 0B28;  -- 	LOAD   Zero
           2F9 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           2FA : 9801;  -- 	OUT    LEDS        ; all LEDs on
           2FB : 9807;  -- 	OUT    XLEDS
           2FC : 82E0;  -- 	CALL   Wait1       ; 1 second
           2FD : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           2FE : 980A;  -- 	OUT    BEEP        ; stop beeping
           2FF : 0B28;  -- 	LOAD   Zero
           300 : 9801;  -- 	OUT    LEDS        ; LEDs off
           301 : 9807;  -- 	OUT    XLEDS
           302 : 82E0;  -- 	CALL   Wait1       ; 1 second
           303 : 2AF2;  -- 	JUMP   DeadBatt    ; repeat forever
           304 : 0B57;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           305 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           306 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           307 : 8312;  -- 	CALL   BlockI2C    ; wait for it to finish
           308 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           309 : 8800;  -- 	RETURN
           30A : 8312;  -- 	CALL   BlockI2C    ; wait for idle
           30B : 0B56;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           30C : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           30D : 0B28;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           30E : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           30F : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           310 : 8312;  -- 	CALL   BlockI2C    ; wait for it to finish
           311 : 8800;  -- 	RETURN
           312 : 0B28;  -- 	LOAD   Zero
           313 : 1320;  -- 	STORE  Temp        ; Used to check for timeout
           314 : 0B20;  -- 	LOAD   Temp
           315 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           316 : 1320;  -- 	STORE  Temp
           317 : 431B;  -- 	JZERO  I2CError    ; Timeout occurred; error
           318 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           319 : 3B14;  -- 	JPOS   BI2CL       ; If not 0, try again
           31A : 8800;  -- 	RETURN             ; Else return
           31B : 0B28;  -- 	LOAD   Zero
           31C : 692C;  -- 	ADDI   &H12C       ; "I2C"
           31D : 9804;  -- 	OUT    SSEG1
           31E : 9805;  -- 	OUT    SSEG2       ; display error message
           31F : 2B1B;  -- 	JUMP   I2CError
           320 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           321 : 0000;  -- DistTemp: DW 0
           322 : FFFF;  -- PrevDist: DW &HFFFF
           323 : 0000;  -- CurrDist: DW 0
           324 : 0000;  -- WiggleAngle: DW 0
           325 : 0028;  -- AdjacentThreshold: DW 40
           326 : 0BB8;  -- MaxDistThreshold: DW 3000
           327 : FFFF;  -- NegOne:   DW -1
           328 : 0000;  -- Zero:     DW 0
           329 : 0001;  -- One:      DW 1
           32A : 0002;  -- Two:      DW 2
           32B : 0003;  -- Three:    DW 3
           32C : 0004;  -- Four:     DW 4
           32D : 0005;  -- Five:     DW 5
           32E : 0006;  -- Six:      DW 6
           32F : 0007;  -- Seven:    DW 7
           330 : 0008;  -- Eight:    DW 8
           331 : 0009;  -- Nine:     DW 9
           332 : 000A;  -- Ten:      DW 10
           333 : 0001;  -- Mask0:    DW &B00000001
           334 : 0002;  -- Mask1:    DW &B00000010
           335 : 0004;  -- Mask2:    DW &B00000100
           336 : 0008;  -- Mask3:    DW &B00001000
           337 : 0010;  -- Mask4:    DW &B00010000
           338 : 0020;  -- Mask5:    DW &B00100000
           339 : 0040;  -- Mask6:    DW &B01000000
           33A : 0080;  -- Mask7:    DW &B10000000
           33B : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           33C : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           33D : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           33E : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           33F : 0092;  -- HalfFt: DW 146
           340 : 0125;  -- Ft1:	  DW 293
           341 : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           342 : 02DC;  -- Ft2Half:  DW 732
           343 : 036F;  -- Ft3:      DW 879
           344 : 0401;  -- Ft3Half:  DW 1025
           345 : 0494;  -- Ft4:      DW 1172
           346 : 05B9;  -- Ft5:      DW 1465
           347 : 0928;  -- Ft8:	  DW 2344
           348 : 0EE1;  -- Ft13:	  DW 3809
           349 : 1250;  -- Ft16:	  DW 4688
           34A : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           34B : 00B4;  -- Deg180:   DW 180       ; 180
           34C : 010E;  -- Deg270:   DW 270       ; 270
           34D : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           34E : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           34F : FF9C;  -- RSlow:    DW -100
           350 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           351 : FEA2;  -- RMid:     DW -350
           352 : 01A4;  -- FFastMid: DW 420
           353 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           354 : FE0C;  -- RFast:    DW -500
           355 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           356 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           357 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           358 : 0000;  -- 	DW 0
  END;
